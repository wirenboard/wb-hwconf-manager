#!/bin/bash
2>/dev/null . /usr/lib/wb-hwconf-manager/functions.sh || . ./functions.sh

# This function reorders WBIO modules to make continuous sequence of plugged devices
# in the begginning of list, moving all empty slots to the end.
# Should be called before doing anything else with config
config_wbio_pack() {
	local JSON=${CONFIG}
	local slot_type
	local slot_name_prefix="External I/O module "
	for slot_type in "wb5-extio"; do
		json_edit '
		def empty_slots(start; count): [range(start; start+count)] | map({
				id: ("'"$slot_type"'"+tostring),
				type: "'"$slot_type"'",
				name: ("'"$slot_name_prefix"'"+tostring),
				module: "",
				options: {}
			});

		.slots |= (reduce .[] as $item (
			{n:1, nn:0, v:[]};
			.n as $n |
			if ($item.id|startswith("'"$slot_type"'")) then (
				if ($item.module == "") then (
					.nn += 1
				) else (
					.n += 1 |
					.v += [$item |
						.id="'"$slot_type"'"+($n|tostring) |
						.name="'"$slot_name_prefix"'"+($n|tostring)
						]
				) end
			) else (
				if (.nn != 0) then (
					.v += (empty_slots(.n; .nn)) + [$item] |
					.nn = 0
				) else (
					.v +=[$item]
				) end
			) end) |
			if (.nn != 0) then (
				.v + empty_slots(.n; .nn)
			) else (
				.v
			) end)
		'
	done
}

config_apply_changes() {
	local old_state=`mktemp`
	local state=`mktemp`
	cp "$CONFIG_STATE" "$old_state" 2>/dev/null

	local CONFIG=${1:-${CONFIG}}
	config_wbio_pack
	while :; do
		cp "$old_state" "$state"

		local delta="$(
			diff -uN "$old_state" <(config_parse | sort) |
			sed -rn 's/^([\+-])([^+-]\S+) /\1 \2 /p'
		)"
		[[ -z "$delta" ]] && break

		local ACTION SLOT MODULE OPTIONS_HASH
		while read ACTION SLOT MODULE OPTIONS_HASH; do
			[[ "$ACTION" == "-" ]] || continue
			[[ -n "$MODULE" ]] && {
				log "Deleting $SLOT:$MODULE"
				module_run_hook del || continue
				module_deinit "$SLOT"
			}
			sed -ri "/^$SLOT.*$/d" "$state"
		done <<< "$delta"

		while read ACTION SLOT MODULE OPTIONS_HASH; do
			[[ "$ACTION" == "+" ]] || continue
			[[ -n "$MODULE" ]] && {
				log "Adding $SLOT:$MODULE"
				module_run_hook add || continue
				module_init "$SLOT" "$MODULE"
			}
			echo "$SLOT $MODULE $OPTIONS_HASH" >> "$state"
		done <<< "$delta"
		sort "$state" > "$old_state"
	done
		
	rm "$old_state"
	sort "$state" > "$CONFIG_STATE"
	rm "$state"

	local hook
	for hook in "${HOOKS_AFTER_CONFIG_CHANGE[@]}"; do
		log "Running hook $hook"
		$hook
	done
}

print_usage_and_exit() {
	>&2 cat <<EOF
Usage: $0 <command>

Commands:
  confed-tojson          Prepare config passed to stdin for the web editor
  confed-fromjson        Prepare edited config for saving
  init <slot> <module>   Initialize module plugged to the slot
  deinit <slot>          Deinitialize any module plugged to the slot
  config-apply           Run modules add/remove hooks when config is changed
  load-overlay <fname>   Compile and load standalone DTS overlay
  unload-overlay <fname> Unload standalone DTS
EOF
	exit 1
}

case "$1" in
	"confed-tojson")
		# Build json description of all modules in form
		# {
		# 	"id": "mod-foo",
		# 	"description": "Foo Module",
		# 	"compatible_slots": ["bar", "baz"]
		# }
		# and put it to "modules" array in the config (which is read from stdin)
		# Also, some post-processing is done afterwards to ensure all mandatory
		# properties are present and to perform migration from older config versions
		perl -e '
			while (<STDIN>) {
				print;
			}
			local $/ = undef;
			foreach $f (@ARGV) {
				$f =~ /\/([^\/.]+)\.dtso$/ and $vals{id} = "\"$1\"";
				open F, $f or die;
				binmode F;
				$file = <F>;
				close F;
				$file =~ /compatible-slots\s*=\s*(.*?);/s and
					$vals{compatible_slots} = "[$1]";
				$file =~ /description\s*=\s*(.*?);/s and
					$vals{description} = $1;

				print "{", join(",", map "\"$_\": $vals{$_}", keys %vals), "}\n";
			};
		' $MODULES/*.dtso |
		jq --slurp '.[0].modules = .[1:] | .[0]' |
		jq '.slots |= map(
			.module = (.module // "") |
			.options = (.options // {}) |
			.compatible = (.compatible // [.type]) |
			del(.type))'
		;;
	"confed-fromjson")
		tmp=`mktemp`
		# Remove "modules" array
		jq 'del(.modules)' > "$tmp"
		
		# stdout+stderr must be JSON, so redirect logging to syslog
		SYSLOG="yes"
		catch_output config_apply_changes "$tmp"
		
		cat "$tmp"
		rm "$tmp"
		;;
	"init")
		module_init $2 $3
		;;
	"deinit")
		module_deinit $2
		;;
	"config-apply")
		config_apply_changes
		;;
	"load-overlay")
		if [ "$#" -ne 2 ]; then
			print_usage_and_exit
		fi

		dts_load $2
		;;
	"unload-overlay")
		if [ "$#" -ne 2 ]; then
			print_usage_and_exit
		fi

		dts_unload $2
		;;
	*)
		print_usage_and_exit
		;;
esac
